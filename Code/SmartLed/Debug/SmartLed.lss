
SmartLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  00000544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001123  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c7  00000000  00000000  000017f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008df  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000507  00000000  00000000  00003273  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000377a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	91 d1       	rcall	.+802    	; 0x37c <main>
  5a:	25 c2       	rjmp	.+1098   	; 0x4a6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <DELAY_us>:
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	19 f0       	breq	.+6      	; 0x68 <DELAY_us+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	00 00       	nop
    {
        _delay_us(1);
		us_count--;
  64:	01 97       	sbiw	r24, 0x01	; 1
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
  66:	e9 f7       	brne	.-6      	; 0x62 <DELAY_us+0x4>
  68:	08 95       	ret

0000006a <I2C_Init>:

 * description :This function is used to initialize the I2C module
------------------------------------------------------------------------------------*/
void I2C_Init()
{
    TWSR=0x00; //set presca1er bits to zero
  6a:	11 b8       	out	0x01, r1	; 1
    TWBR=0x46; //SCL frequency is 50K for 16Mhz
  6c:	86 e4       	ldi	r24, 0x46	; 70
  6e:	80 b9       	out	0x00, r24	; 0
    TWCR=0x04; //enab1e TWI module
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	86 bf       	out	0x36, r24	; 54
  74:	08 95       	ret

00000076 <I2C_Start>:
                      ____|         |____________

 ***************************************************************************************************/
void I2C_Start()
{
    TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
  76:	84 ea       	ldi	r24, 0xA4	; 164
  78:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));
  7a:	06 b6       	in	r0, 0x36	; 54
  7c:	07 fe       	sbrs	r0, 7
  7e:	fd cf       	rjmp	.-6      	; 0x7a <I2C_Start+0x4>
}
  80:	08 95       	ret

00000082 <I2C_Stop>:

 ***************************************************************************************************/

void I2C_Stop(void)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
  82:	84 e9       	ldi	r24, 0x94	; 148
  84:	86 bf       	out	0x36, r24	; 54
    DELAY_us(100) ; //wait for a short time
  86:	84 e6       	ldi	r24, 0x64	; 100
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	e9 df       	rcall	.-46     	; 0x5e <DELAY_us>
  8c:	08 95       	ret

0000008e <I2C_Write>:


 ***************************************************************************************************/
void I2C_Write(uint8_t v_i2cData_u8)
{
    TWDR = v_i2cData_u8 ;
  8e:	83 b9       	out	0x03, r24	; 3
    TWCR = ((1<< TWINT) | (1<<TWEN));
  90:	84 e8       	ldi	r24, 0x84	; 132
  92:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 <<TWINT)));
  94:	06 b6       	in	r0, 0x36	; 54
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <I2C_Write+0x6>
}
  9a:	08 95       	ret

0000009c <I2C_Read>:


***************************************************************************************************/
uint8_t I2C_Read(uint8_t v_ackOption_u8)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (v_ackOption_u8<<TWEA));
  9c:	20 e4       	ldi	r18, 0x40	; 64
  9e:	82 9f       	mul	r24, r18
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	84 68       	ori	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
    while ( !(TWCR & (1 <<TWINT)));
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <I2C_Read+0xc>
    return TWDR;
  ae:	83 b1       	in	r24, 0x03	; 3
}
  b0:	08 95       	ret

000000b2 <checkManualButton>:
	
	// Friday: 5th day of week considering monday as first day.
	/*##### Set the time and Date only once. Once the Time and Date is set, comment these lines
	and reflash the code. Else the time will be set every time the controller is reset*/
	RTC_SetDateTime(&rtc);  //  10:40:20 am, 1st Jan 2016
}
  b2:	81 99       	sbic	0x10, 1	; 16
  b4:	1c c0       	rjmp	.+56     	; 0xee <checkManualButton+0x3c>
  b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <manualButtonStatus>
  ba:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <manualButtonStatus+0x1>
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	11 f5       	brne	.+68     	; 0x106 <checkManualButton+0x54>
  c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <manualButtonStatus+0x1>
  c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <manualButtonStatus>
  ca:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  ce:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	29 f4       	brne	.+10     	; 0xe0 <checkManualButton+0x2e>
  d6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
  da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
  de:	08 95       	ret
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
  ec:	08 95       	ret
  ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <manualButtonStatus>
  f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <manualButtonStatus+0x1>
  f6:	89 2b       	or	r24, r25
  f8:	31 f4       	brne	.+12     	; 0x106 <checkManualButton+0x54>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <manualButtonStatus+0x1>
 102:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <manualButtonStatus>
 106:	08 95       	ret

00000108 <checkElectricityStatus>:
 108:	80 99       	sbic	0x10, 0	; 16
 10a:	0d c0       	rjmp	.+26     	; 0x126 <checkElectricityStatus+0x1e>
 10c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 110:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 114:	89 2b       	or	r24, r25
 116:	89 f4       	brne	.+34     	; 0x13a <checkElectricityStatus+0x32>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <electricityStatus+0x1>
 120:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <electricityStatus>
 124:	08 95       	ret
 126:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 12a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	21 f4       	brne	.+8      	; 0x13a <checkElectricityStatus+0x32>
 132:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <electricityStatus+0x1>
 136:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <electricityStatus>
 13a:	08 95       	ret

0000013c <blinkAccordingToHourNumber>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	27 97       	sbiw	r28, 0x07	; 7
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	29 83       	std	Y+1, r18	; 0x01
 152:	3a 83       	std	Y+2, r19	; 0x02
 154:	4b 83       	std	Y+3, r20	; 0x03
 156:	5c 83       	std	Y+4, r21	; 0x04
 158:	6d 83       	std	Y+5, r22	; 0x05
 15a:	7e 83       	std	Y+6, r23	; 0x06
 15c:	8f 83       	std	Y+7, r24	; 0x07
 15e:	44 23       	and	r20, r20
 160:	e9 f0       	breq	.+58     	; 0x19c <blinkAccordingToHourNumber+0x60>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	98 2f       	mov	r25, r24
 166:	9f 7e       	andi	r25, 0xEF	; 239
 168:	9a 50       	subi	r25, 0x0A	; 10
 16a:	96 30       	cpi	r25, 0x06	; 6
 16c:	a0 f0       	brcs	.+40     	; 0x196 <blinkAccordingToHourNumber+0x5a>
 16e:	c4 9a       	sbi	0x18, 4	; 24
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	36 e7       	ldi	r19, 0x76	; 118
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <blinkAccordingToHourNumber+0x3a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <blinkAccordingToHourNumber+0x44>
 180:	00 00       	nop
 182:	c4 98       	cbi	0x18, 4	; 24
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	33 ef       	ldi	r19, 0xF3	; 243
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <blinkAccordingToHourNumber+0x4e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <blinkAccordingToHourNumber+0x58>
 194:	00 00       	nop
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	84 13       	cpse	r24, r20
 19a:	e4 cf       	rjmp	.-56     	; 0x164 <blinkAccordingToHourNumber+0x28>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	37 ee       	ldi	r19, 0xE7	; 231
 1a0:	43 e0       	ldi	r20, 0x03	; 3
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	40 40       	sbci	r20, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <blinkAccordingToHourNumber+0x66>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <blinkAccordingToHourNumber+0x70>
 1ac:	00 00       	nop
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	90 31       	cpi	r25, 0x10	; 16
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <blinkAccordingToHourNumber+0x7c>
 1b4:	96 50       	subi	r25, 0x06	; 6
 1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <blinkAccordingToHourNumber+0x9a>
 1b8:	90 32       	cpi	r25, 0x20	; 32
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <blinkAccordingToHourNumber+0x84>
 1bc:	9c 50       	subi	r25, 0x0C	; 12
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <blinkAccordingToHourNumber+0x9a>
 1c0:	90 33       	cpi	r25, 0x30	; 48
 1c2:	10 f0       	brcs	.+4      	; 0x1c8 <blinkAccordingToHourNumber+0x8c>
 1c4:	98 51       	subi	r25, 0x18	; 24
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <blinkAccordingToHourNumber+0x9a>
 1c8:	90 34       	cpi	r25, 0x40	; 64
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <blinkAccordingToHourNumber+0x94>
 1cc:	9e 51       	subi	r25, 0x1E	; 30
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <blinkAccordingToHourNumber+0x9a>
 1d0:	90 35       	cpi	r25, 0x50	; 80
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <blinkAccordingToHourNumber+0x9a>
 1d4:	94 52       	subi	r25, 0x24	; 36
 1d6:	99 23       	and	r25, r25
 1d8:	c1 f0       	breq	.+48     	; 0x20a <blinkAccordingToHourNumber+0xce>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	c4 9a       	sbi	0x18, 4	; 24
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	39 ef       	ldi	r19, 0xF9	; 249
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	40 40       	sbci	r20, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <blinkAccordingToHourNumber+0xa8>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <blinkAccordingToHourNumber+0xb2>
 1ee:	00 00       	nop
 1f0:	c4 98       	cbi	0x18, 4	; 24
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	36 e7       	ldi	r19, 0x76	; 118
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	30 40       	sbci	r19, 0x00	; 0
 1fc:	40 40       	sbci	r20, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <blinkAccordingToHourNumber+0xbc>
 200:	00 c0       	rjmp	.+0      	; 0x202 <blinkAccordingToHourNumber+0xc6>
 202:	00 00       	nop
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	89 13       	cpse	r24, r25
 208:	e9 cf       	rjmp	.-46     	; 0x1dc <blinkAccordingToHourNumber+0xa0>
 20a:	27 96       	adiw	r28, 0x07	; 7
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <checkShowTimeButton>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	27 97       	sbiw	r28, 0x07	; 7
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	29 83       	std	Y+1, r18	; 0x01
 232:	3a 83       	std	Y+2, r19	; 0x02
 234:	4b 83       	std	Y+3, r20	; 0x03
 236:	5c 83       	std	Y+4, r21	; 0x04
 238:	6d 83       	std	Y+5, r22	; 0x05
 23a:	7e 83       	std	Y+6, r23	; 0x06
 23c:	8f 83       	std	Y+7, r24	; 0x07
 23e:	84 99       	sbic	0x10, 4	; 16
 240:	0d c0       	rjmp	.+26     	; 0x25c <checkShowTimeButton+0x40>
 242:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 246:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	99 f4       	brne	.+38     	; 0x274 <checkShowTimeButton+0x58>
 24e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 252:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 256:	8f 81       	ldd	r24, Y+7	; 0x07
 258:	71 df       	rcall	.-286    	; 0x13c <blinkAccordingToHourNumber>
 25a:	0c c0       	rjmp	.+24     	; 0x274 <checkShowTimeButton+0x58>
 25c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 260:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 264:	89 2b       	or	r24, r25
 266:	31 f4       	brne	.+12     	; 0x274 <checkShowTimeButton+0x58>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 274:	27 96       	adiw	r28, 0x07	; 7
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <isActiveTime>:
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	27 97       	sbiw	r28, 0x07	; 7
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	55 30       	cpi	r21, 0x05	; 5
 29c:	49 f0       	breq	.+18     	; 0x2b0 <isActiveTime+0x2a>
 29e:	41 51       	subi	r20, 0x11	; 17
 2a0:	47 30       	cpi	r20, 0x07	; 7
 2a2:	48 f4       	brcc	.+18     	; 0x2b6 <isActiveTime+0x30>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	30 33       	cpi	r19, 0x30	; 48
 2aa:	39 f0       	breq	.+14     	; 0x2ba <isActiveTime+0x34>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <isActiveTime+0x34>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <isActiveTime+0x34>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	27 96       	adiw	r28, 0x07	; 7
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <changeOutputLedStatus>:
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <changeOutputLedStatus+0x8>
 2d0:	c0 9a       	sbi	0x18, 0	; 24
 2d2:	08 95       	ret
 2d4:	c0 98       	cbi	0x18, 0	; 24
 2d6:	08 95       	ret

000002d8 <checkOnButton>:
 2d8:	82 99       	sbic	0x10, 2	; 16
 2da:	0e c0       	rjmp	.+28     	; 0x2f8 <checkOnButton+0x20>
 2dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 2e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	a1 f4       	brne	.+40     	; 0x310 <checkOnButton+0x38>
 2e8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <turnOnButtonStatus+0x1>
 2ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <turnOnButtonStatus>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	eb df       	rcall	.-42     	; 0x2cc <changeOutputLedStatus>
 2f6:	08 95       	ret
 2f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 2fc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 300:	89 2b       	or	r24, r25
 302:	31 f4       	brne	.+12     	; 0x310 <checkOnButton+0x38>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <turnOnButtonStatus+0x1>
 30c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <turnOnButtonStatus>
 310:	08 95       	ret

00000312 <checkOffButton>:
 312:	83 99       	sbic	0x10, 3	; 16
 314:	0e c0       	rjmp	.+28     	; 0x332 <checkOffButton+0x20>
 316:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 31a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	a1 f4       	brne	.+40     	; 0x34a <checkOffButton+0x38>
 322:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <turnOnButtonStatus+0x1>
 326:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <turnOnButtonStatus>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	ce df       	rcall	.-100    	; 0x2cc <changeOutputLedStatus>
 330:	08 95       	ret
 332:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 336:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 33a:	89 2b       	or	r24, r25
 33c:	31 f4       	brne	.+12     	; 0x34a <checkOffButton+0x38>
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <turnOnButtonStatus+0x1>
 346:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <turnOnButtonStatus>
 34a:	08 95       	ret

0000034c <changeElectricityInidicator>:
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	11 f4       	brne	.+4      	; 0x354 <changeElectricityInidicator+0x8>
 350:	c1 9a       	sbi	0x18, 1	; 24
 352:	08 95       	ret
 354:	c1 98       	cbi	0x18, 1	; 24
 356:	08 95       	ret

00000358 <changeTimeInidicator>:
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	11 f4       	brne	.+4      	; 0x360 <changeTimeInidicator+0x8>
 35c:	c2 9a       	sbi	0x18, 2	; 24
 35e:	08 95       	ret
 360:	c2 98       	cbi	0x18, 2	; 24
 362:	08 95       	ret

00000364 <changeAutoInidicator>:
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	11 f4       	brne	.+4      	; 0x36c <changeAutoInidicator+0x8>
 368:	c3 9a       	sbi	0x18, 3	; 24
 36a:	08 95       	ret
 36c:	c3 98       	cbi	0x18, 3	; 24
 36e:	08 95       	ret

00000370 <initPorts>:

void initPorts(){
	DDRD = 0x00; // Set PORT D to input
 370:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF; // Set PORT B to output
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	87 bb       	out	0x17, r24	; 23

	PORTD = 0b11111110; //enable pull-ups
 376:	8e ef       	ldi	r24, 0xFE	; 254
 378:	82 bb       	out	0x12, r24	; 18
 37a:	08 95       	ret

0000037c <main>:

//Variables
int isManualControl = 0;

int main()
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	27 97       	sbiw	r28, 0x07	; 7
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
	OSCCAL=0xFF;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	81 bf       	out	0x31, r24	; 49
	rtc_t rtc;
	RTC_Init();
 394:	59 d0       	rcall	.+178    	; 0x448 <RTC_Init>
	initPorts();
 396:	ec df       	rcall	.-40     	; 0x370 <initPorts>
	//setRtcTime(rtc);
	
	while(1)
	{
		RTC_GetDateTime(&rtc);
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	5f d0       	rcall	.+190    	; 0x45c <RTC_GetDateTime>
		checkShowTimeButton(rtc);
 39e:	29 81       	ldd	r18, Y+1	; 0x01
 3a0:	3a 81       	ldd	r19, Y+2	; 0x02
 3a2:	4b 81       	ldd	r20, Y+3	; 0x03
 3a4:	5c 81       	ldd	r21, Y+4	; 0x04
 3a6:	6d 81       	ldd	r22, Y+5	; 0x05
 3a8:	7e 81       	ldd	r23, Y+6	; 0x06
 3aa:	8f 81       	ldd	r24, Y+7	; 0x07
 3ac:	37 df       	rcall	.-402    	; 0x21c <checkShowTimeButton>

		checkManualButton();
 3ae:	81 de       	rcall	.-766    	; 0xb2 <checkManualButton>
		checkElectricityStatus();
 3b0:	ab de       	rcall	.-682    	; 0x108 <checkElectricityStatus>

		if(isManualControl == 1){
 3b2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3b6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <main+0x4a>
			changeAutoInidicator(1);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	d0 df       	rcall	.-96     	; 0x364 <changeAutoInidicator>
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <main+0x50>
			} else {
			changeAutoInidicator(0);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	cc df       	rcall	.-104    	; 0x364 <changeAutoInidicator>
		}

		if(isManualControl == 0)
 3cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3d0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 3d4:	89 2b       	or	r24, r25
 3d6:	41 f5       	brne	.+80     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			if(isActiveTime(rtc) == 1)
 3d8:	29 81       	ldd	r18, Y+1	; 0x01
 3da:	3a 81       	ldd	r19, Y+2	; 0x02
 3dc:	4b 81       	ldd	r20, Y+3	; 0x03
 3de:	5c 81       	ldd	r21, Y+4	; 0x04
 3e0:	6d 81       	ldd	r22, Y+5	; 0x05
 3e2:	7e 81       	ldd	r23, Y+6	; 0x06
 3e4:	8f 81       	ldd	r24, Y+7	; 0x07
 3e6:	4f df       	rcall	.-354    	; 0x286 <isActiveTime>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	b9 f4       	brne	.+46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			{
				changeTimeInidicator(1);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	b3 df       	rcall	.-154    	; 0x358 <changeTimeInidicator>
				if(electricityStatus==1)
 3f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 3f6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	39 f4       	brne	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
				{
					changeOutputLedStatus(0);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	64 df       	rcall	.-312    	; 0x2cc <changeOutputLedStatus>
					changeElectricityInidicator(1);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	a1 df       	rcall	.-190    	; 0x34c <changeElectricityInidicator>
 40a:	10 c0       	rjmp	.+32     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				}
				else
				{
					changeOutputLedStatus(1);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	5d df       	rcall	.-326    	; 0x2cc <changeOutputLedStatus>
					changeElectricityInidicator(0);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	9a df       	rcall	.-204    	; 0x34c <changeElectricityInidicator>
 418:	09 c0       	rjmp	.+18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				}
			}
			else
			{
				changeTimeInidicator(0);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	9c df       	rcall	.-200    	; 0x358 <changeTimeInidicator>
				changeOutputLedStatus(0);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	53 df       	rcall	.-346    	; 0x2cc <changeOutputLedStatus>
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}
		}
		else
		{
			checkOnButton();
 428:	57 df       	rcall	.-338    	; 0x2d8 <checkOnButton>
			checkOffButton();
 42a:	73 df       	rcall	.-282    	; 0x312 <checkOffButton>
		}

		if(electricityStatus==1)
 42c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 430:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	21 f4       	brne	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		{
			changeElectricityInidicator(1);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	87 df       	rcall	.-242    	; 0x34c <changeElectricityInidicator>
 43e:	ac cf       	rjmp	.-168    	; 0x398 <main+0x1c>
		}
		else
		{
			changeElectricityInidicator(0);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	83 df       	rcall	.-250    	; 0x34c <changeElectricityInidicator>
 446:	a8 cf       	rjmp	.-176    	; 0x398 <main+0x1c>

00000448 <RTC_Init>:
    I2C_Write(rtc->date);                    // Write date on RAM address 04H
    I2C_Write(rtc->month);                    // Write month on RAM address 05H
    I2C_Write(rtc->year);                    // Write year on RAM address 06h

    I2C_Stop();                              // Stop I2C communication after Setting the Date
}
 448:	10 de       	rcall	.-992    	; 0x6a <I2C_Init>
 44a:	15 de       	rcall	.-982    	; 0x76 <I2C_Start>
 44c:	80 ed       	ldi	r24, 0xD0	; 208
 44e:	1f de       	rcall	.-962    	; 0x8e <I2C_Write>
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	1d de       	rcall	.-966    	; 0x8e <I2C_Write>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	1b de       	rcall	.-970    	; 0x8e <I2C_Write>
 458:	14 de       	rcall	.-984    	; 0x82 <I2C_Stop>
 45a:	08 95       	ret

0000045c <RTC_GetDateTime>:
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	ec 01       	movw	r28, r24
    I2C_Start();                            // Start I2C communication
 462:	09 de       	rcall	.-1006   	; 0x76 <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
 464:	80 ed       	ldi	r24, 0xD0	; 208
 466:	13 de       	rcall	.-986    	; 0x8e <I2C_Write>
    I2C_Write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	11 de       	rcall	.-990    	; 0x8e <I2C_Write>

    I2C_Stop();                                // Stop I2C communication after selecting Sec Register
 46c:	0a de       	rcall	.-1004   	; 0x82 <I2C_Stop>

    I2C_Start();                            // Start I2C communication
 46e:	03 de       	rcall	.-1018   	; 0x76 <I2C_Start>
    I2C_Write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
 470:	81 ed       	ldi	r24, 0xD1	; 209
 472:	0d de       	rcall	.-998    	; 0x8e <I2C_Write>

    rtc->sec = I2C_Read(1);                // read second and return Positive ACK
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	12 de       	rcall	.-988    	; 0x9c <I2C_Read>
 478:	88 83       	st	Y, r24
    rtc->min = I2C_Read(1);                 // read minute and return Positive ACK
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0f de       	rcall	.-994    	; 0x9c <I2C_Read>
 47e:	89 83       	std	Y+1, r24	; 0x01
    rtc->hour= I2C_Read(1);               // read hour and return Negative/No ACK
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0c de       	rcall	.-1000   	; 0x9c <I2C_Read>
 484:	8a 83       	std	Y+2, r24	; 0x02
    rtc->weekDay = I2C_Read(1);           // read weekDay and return Positive ACK
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	09 de       	rcall	.-1006   	; 0x9c <I2C_Read>
 48a:	8b 83       	std	Y+3, r24	; 0x03
    rtc->date= I2C_Read(1);              // read Date and return Positive ACK
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	06 de       	rcall	.-1012   	; 0x9c <I2C_Read>
 490:	8c 83       	std	Y+4, r24	; 0x04
    rtc->month=I2C_Read(1);            // read Month and return Positive ACK
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	03 de       	rcall	.-1018   	; 0x9c <I2C_Read>
 496:	8d 83       	std	Y+5, r24	; 0x05
    rtc->year =I2C_Read(0);             // read Year and return Negative/No ACK
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	00 de       	rcall	.-1024   	; 0x9c <I2C_Read>
 49c:	8e 83       	std	Y+6, r24	; 0x06

    I2C_Stop();                              // Stop I2C communication after reading the Date
 49e:	f1 dd       	rcall	.-1054   	; 0x82 <I2C_Stop>
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
