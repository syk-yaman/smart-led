
SmartLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004ba  0000054e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  00000554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115f  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a06  00000000  00000000  0000183f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096f  00000000  00000000  00002245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  00002dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d7  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000386f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	90 d1       	rcall	.+800    	; 0x37a <main>
  5a:	2d c2       	rjmp	.+1114   	; 0x4b6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <DELAY_us>:
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	19 f0       	breq	.+6      	; 0x68 <DELAY_us+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	00 00       	nop
    {
        _delay_us(1);
		us_count--;
  64:	01 97       	sbiw	r24, 0x01	; 1
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
  66:	e9 f7       	brne	.-6      	; 0x62 <DELAY_us+0x4>
  68:	08 95       	ret

0000006a <I2C_Init>:

 * description :This function is used to initialize the I2C module
------------------------------------------------------------------------------------*/
void I2C_Init()
{
    TWSR=0x00; //set presca1er bits to zero
  6a:	11 b8       	out	0x01, r1	; 1
    TWBR=0x46; //SCL frequency is 50K for 16Mhz
  6c:	86 e4       	ldi	r24, 0x46	; 70
  6e:	80 b9       	out	0x00, r24	; 0
    TWCR=0x04; //enab1e TWI module
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	86 bf       	out	0x36, r24	; 54
  74:	08 95       	ret

00000076 <I2C_Start>:
                      ____|         |____________

 ***************************************************************************************************/
void I2C_Start()
{
    TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
  76:	84 ea       	ldi	r24, 0xA4	; 164
  78:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));
  7a:	06 b6       	in	r0, 0x36	; 54
  7c:	07 fe       	sbrs	r0, 7
  7e:	fd cf       	rjmp	.-6      	; 0x7a <I2C_Start+0x4>
}
  80:	08 95       	ret

00000082 <I2C_Stop>:

 ***************************************************************************************************/

void I2C_Stop(void)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
  82:	84 e9       	ldi	r24, 0x94	; 148
  84:	86 bf       	out	0x36, r24	; 54
    DELAY_us(100) ; //wait for a short time
  86:	84 e6       	ldi	r24, 0x64	; 100
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	e9 df       	rcall	.-46     	; 0x5e <DELAY_us>
  8c:	08 95       	ret

0000008e <I2C_Write>:


 ***************************************************************************************************/
void I2C_Write(uint8_t v_i2cData_u8)
{
    TWDR = v_i2cData_u8 ;
  8e:	83 b9       	out	0x03, r24	; 3
    TWCR = ((1<< TWINT) | (1<<TWEN));
  90:	84 e8       	ldi	r24, 0x84	; 132
  92:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 <<TWINT)));
  94:	06 b6       	in	r0, 0x36	; 54
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <I2C_Write+0x6>
}
  9a:	08 95       	ret

0000009c <I2C_Read>:


***************************************************************************************************/
uint8_t I2C_Read(uint8_t v_ackOption_u8)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (v_ackOption_u8<<TWEA));
  9c:	20 e4       	ldi	r18, 0x40	; 64
  9e:	82 9f       	mul	r24, r18
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	84 68       	ori	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
    while ( !(TWCR & (1 <<TWINT)));
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <I2C_Read+0xc>
    return TWDR;
  ae:	83 b1       	in	r24, 0x03	; 3
}
  b0:	08 95       	ret

000000b2 <checkManualButton>:
	
	// Friday: 5th day of week considering monday as first day.
	/*##### Set the time and Date only once. Once the Time and Date is set, comment these lines
	and reflash the code. Else the time will be set every time the controller is reset*/
	RTC_SetDateTime(&rtc);  //  10:40:20 am, 1st Jan 2016
}
  b2:	81 99       	sbic	0x10, 1	; 16
  b4:	1c c0       	rjmp	.+56     	; 0xee <checkManualButton+0x3c>
  b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <manualButtonStatus>
  ba:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <manualButtonStatus+0x1>
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	11 f5       	brne	.+68     	; 0x106 <checkManualButton+0x54>
  c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <manualButtonStatus+0x1>
  c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <manualButtonStatus>
  ca:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  ce:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	29 f4       	brne	.+10     	; 0xe0 <checkManualButton+0x2e>
  d6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
  da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
  de:	08 95       	ret
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
  ec:	08 95       	ret
  ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <manualButtonStatus>
  f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <manualButtonStatus+0x1>
  f6:	89 2b       	or	r24, r25
  f8:	31 f4       	brne	.+12     	; 0x106 <checkManualButton+0x54>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <manualButtonStatus+0x1>
 102:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <manualButtonStatus>
 106:	08 95       	ret

00000108 <checkElectricityStatus>:
 108:	80 99       	sbic	0x10, 0	; 16
 10a:	0d c0       	rjmp	.+26     	; 0x126 <checkElectricityStatus+0x1e>
 10c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 110:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 114:	89 2b       	or	r24, r25
 116:	89 f4       	brne	.+34     	; 0x13a <checkElectricityStatus+0x32>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <electricityStatus+0x1>
 120:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <electricityStatus>
 124:	08 95       	ret
 126:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 12a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	21 f4       	brne	.+8      	; 0x13a <checkElectricityStatus+0x32>
 132:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <electricityStatus+0x1>
 136:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <electricityStatus>
 13a:	08 95       	ret

0000013c <blinkAccordingToHourNumber>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	27 97       	sbiw	r28, 0x07	; 7
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	29 83       	std	Y+1, r18	; 0x01
 152:	3a 83       	std	Y+2, r19	; 0x02
 154:	4b 83       	std	Y+3, r20	; 0x03
 156:	5c 83       	std	Y+4, r21	; 0x04
 158:	6d 83       	std	Y+5, r22	; 0x05
 15a:	7e 83       	std	Y+6, r23	; 0x06
 15c:	8f 83       	std	Y+7, r24	; 0x07
 15e:	44 23       	and	r20, r20
 160:	f9 f0       	breq	.+62     	; 0x1a0 <blinkAccordingToHourNumber+0x64>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	a8 95       	wdr
 166:	98 2f       	mov	r25, r24
 168:	9f 7e       	andi	r25, 0xEF	; 239
 16a:	9a 50       	subi	r25, 0x0A	; 10
 16c:	96 30       	cpi	r25, 0x06	; 6
 16e:	a8 f0       	brcs	.+42     	; 0x19a <blinkAccordingToHourNumber+0x5e>
 170:	c4 9a       	sbi	0x18, 4	; 24
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	36 e7       	ldi	r19, 0x76	; 118
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	30 40       	sbci	r19, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <blinkAccordingToHourNumber+0x3c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <blinkAccordingToHourNumber+0x46>
 182:	00 00       	nop
 184:	a8 95       	wdr
 186:	c4 98       	cbi	0x18, 4	; 24
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	33 ef       	ldi	r19, 0xF3	; 243
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	30 40       	sbci	r19, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <blinkAccordingToHourNumber+0x52>
 196:	00 c0       	rjmp	.+0      	; 0x198 <blinkAccordingToHourNumber+0x5c>
 198:	00 00       	nop
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	84 13       	cpse	r24, r20
 19e:	e2 cf       	rjmp	.-60     	; 0x164 <blinkAccordingToHourNumber+0x28>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	37 ee       	ldi	r19, 0xE7	; 231
 1a4:	43 e0       	ldi	r20, 0x03	; 3
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	30 40       	sbci	r19, 0x00	; 0
 1aa:	40 40       	sbci	r20, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <blinkAccordingToHourNumber+0x6a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <blinkAccordingToHourNumber+0x74>
 1b0:	00 00       	nop
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	90 31       	cpi	r25, 0x10	; 16
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <blinkAccordingToHourNumber+0x80>
 1b8:	96 50       	subi	r25, 0x06	; 6
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <blinkAccordingToHourNumber+0x9e>
 1bc:	90 32       	cpi	r25, 0x20	; 32
 1be:	10 f0       	brcs	.+4      	; 0x1c4 <blinkAccordingToHourNumber+0x88>
 1c0:	9c 50       	subi	r25, 0x0C	; 12
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <blinkAccordingToHourNumber+0x9e>
 1c4:	90 33       	cpi	r25, 0x30	; 48
 1c6:	10 f0       	brcs	.+4      	; 0x1cc <blinkAccordingToHourNumber+0x90>
 1c8:	98 51       	subi	r25, 0x18	; 24
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <blinkAccordingToHourNumber+0x9e>
 1cc:	90 34       	cpi	r25, 0x40	; 64
 1ce:	10 f0       	brcs	.+4      	; 0x1d4 <blinkAccordingToHourNumber+0x98>
 1d0:	9e 51       	subi	r25, 0x1E	; 30
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <blinkAccordingToHourNumber+0x9e>
 1d4:	90 35       	cpi	r25, 0x50	; 80
 1d6:	08 f0       	brcs	.+2      	; 0x1da <blinkAccordingToHourNumber+0x9e>
 1d8:	94 52       	subi	r25, 0x24	; 36
 1da:	99 23       	and	r25, r25
 1dc:	d1 f0       	breq	.+52     	; 0x212 <blinkAccordingToHourNumber+0xd6>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	a8 95       	wdr
 1e2:	c4 9a       	sbi	0x18, 4	; 24
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	39 ef       	ldi	r19, 0xF9	; 249
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	40 40       	sbci	r20, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <blinkAccordingToHourNumber+0xae>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <blinkAccordingToHourNumber+0xb8>
 1f4:	00 00       	nop
 1f6:	a8 95       	wdr
 1f8:	c4 98       	cbi	0x18, 4	; 24
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	36 e7       	ldi	r19, 0x76	; 118
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	21 50       	subi	r18, 0x01	; 1
 202:	30 40       	sbci	r19, 0x00	; 0
 204:	40 40       	sbci	r20, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <blinkAccordingToHourNumber+0xc4>
 208:	00 c0       	rjmp	.+0      	; 0x20a <blinkAccordingToHourNumber+0xce>
 20a:	00 00       	nop
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	89 13       	cpse	r24, r25
 210:	e7 cf       	rjmp	.-50     	; 0x1e0 <blinkAccordingToHourNumber+0xa4>
 212:	27 96       	adiw	r28, 0x07	; 7
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <checkShowTimeButton>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	27 97       	sbiw	r28, 0x07	; 7
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	29 83       	std	Y+1, r18	; 0x01
 23a:	3a 83       	std	Y+2, r19	; 0x02
 23c:	4b 83       	std	Y+3, r20	; 0x03
 23e:	5c 83       	std	Y+4, r21	; 0x04
 240:	6d 83       	std	Y+5, r22	; 0x05
 242:	7e 83       	std	Y+6, r23	; 0x06
 244:	8f 83       	std	Y+7, r24	; 0x07
 246:	84 99       	sbic	0x10, 4	; 16
 248:	0d c0       	rjmp	.+26     	; 0x264 <checkShowTimeButton+0x40>
 24a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 24e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	99 f4       	brne	.+38     	; 0x27c <checkShowTimeButton+0x58>
 256:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 25a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 25e:	8f 81       	ldd	r24, Y+7	; 0x07
 260:	6d df       	rcall	.-294    	; 0x13c <blinkAccordingToHourNumber>
 262:	0c c0       	rjmp	.+24     	; 0x27c <checkShowTimeButton+0x58>
 264:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 268:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 26c:	89 2b       	or	r24, r25
 26e:	31 f4       	brne	.+12     	; 0x27c <checkShowTimeButton+0x58>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 278:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 27c:	27 96       	adiw	r28, 0x07	; 7
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <isActiveTime>:
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	27 97       	sbiw	r28, 0x07	; 7
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	55 30       	cpi	r21, 0x05	; 5
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <isActiveTime+0x26>
 2a6:	42 51       	subi	r20, 0x12	; 18
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	46 30       	cpi	r20, 0x06	; 6
 2ae:	20 f0       	brcs	.+8      	; 0x2b8 <isActiveTime+0x2a>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <isActiveTime+0x2a>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	27 96       	adiw	r28, 0x07	; 7
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <changeOutputLedStatus>:
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <changeOutputLedStatus+0x8>
 2ce:	c0 9a       	sbi	0x18, 0	; 24
 2d0:	08 95       	ret
 2d2:	c0 98       	cbi	0x18, 0	; 24
 2d4:	08 95       	ret

000002d6 <checkOnButton>:
 2d6:	82 99       	sbic	0x10, 2	; 16
 2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <checkOnButton+0x20>
 2da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 2de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	a1 f4       	brne	.+40     	; 0x30e <checkOnButton+0x38>
 2e6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <turnOnButtonStatus+0x1>
 2ea:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <turnOnButtonStatus>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	eb df       	rcall	.-42     	; 0x2ca <changeOutputLedStatus>
 2f4:	08 95       	ret
 2f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 2fa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	31 f4       	brne	.+12     	; 0x30e <checkOnButton+0x38>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <turnOnButtonStatus+0x1>
 30a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <turnOnButtonStatus>
 30e:	08 95       	ret

00000310 <checkOffButton>:
 310:	83 99       	sbic	0x10, 3	; 16
 312:	0e c0       	rjmp	.+28     	; 0x330 <checkOffButton+0x20>
 314:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 318:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	a1 f4       	brne	.+40     	; 0x348 <checkOffButton+0x38>
 320:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <turnOnButtonStatus+0x1>
 324:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <turnOnButtonStatus>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	ce df       	rcall	.-100    	; 0x2ca <changeOutputLedStatus>
 32e:	08 95       	ret
 330:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <turnOnButtonStatus>
 334:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <turnOnButtonStatus+0x1>
 338:	89 2b       	or	r24, r25
 33a:	31 f4       	brne	.+12     	; 0x348 <checkOffButton+0x38>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <turnOnButtonStatus+0x1>
 344:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <turnOnButtonStatus>
 348:	08 95       	ret

0000034a <changeElectricityInidicator>:
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	11 f4       	brne	.+4      	; 0x352 <changeElectricityInidicator+0x8>
 34e:	c1 9a       	sbi	0x18, 1	; 24
 350:	08 95       	ret
 352:	c1 98       	cbi	0x18, 1	; 24
 354:	08 95       	ret

00000356 <changeTimeInidicator>:
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	11 f4       	brne	.+4      	; 0x35e <changeTimeInidicator+0x8>
 35a:	c2 9a       	sbi	0x18, 2	; 24
 35c:	08 95       	ret
 35e:	c2 98       	cbi	0x18, 2	; 24
 360:	08 95       	ret

00000362 <changeAutoInidicator>:
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	11 f4       	brne	.+4      	; 0x36a <changeAutoInidicator+0x8>
 366:	c3 9a       	sbi	0x18, 3	; 24
 368:	08 95       	ret
 36a:	c3 98       	cbi	0x18, 3	; 24
 36c:	08 95       	ret

0000036e <initPorts>:

void initPorts(){
	DDRD = 0x00; // Set PORT D to input
 36e:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF; // Set PORT B to output
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	87 bb       	out	0x17, r24	; 23

	PORTD = 0b11111110; //enable pull-ups
 374:	8e ef       	ldi	r24, 0xFE	; 254
 376:	82 bb       	out	0x12, r24	; 18
 378:	08 95       	ret

0000037a <main>:

//Variables
int isManualControl = 0;

int main()
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	27 97       	sbiw	r28, 0x07	; 7
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
	OSCCAL=0xFF;
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	81 bf       	out	0x31, r24	; 49
	rtc_t rtc;
	RTC_Init();
 392:	62 d0       	rcall	.+196    	; 0x458 <RTC_Init>
	initPorts();
 394:	ec df       	rcall	.-40     	; 0x36e <initPorts>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	88 e1       	ldi	r24, 0x18	; 24
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	a8 95       	wdr
 3a0:	81 bd       	out	0x21, r24	; 33
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_2S);
	//setRtcTime(rtc);
	
	while(1)
	{
		wdt_reset();
 3a6:	a8 95       	wdr
		RTC_GetDateTime(&rtc);
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	5f d0       	rcall	.+190    	; 0x46c <RTC_GetDateTime>
		checkShowTimeButton(rtc);
 3ae:	29 81       	ldd	r18, Y+1	; 0x01
 3b0:	3a 81       	ldd	r19, Y+2	; 0x02
 3b2:	4b 81       	ldd	r20, Y+3	; 0x03
 3b4:	5c 81       	ldd	r21, Y+4	; 0x04
 3b6:	6d 81       	ldd	r22, Y+5	; 0x05
 3b8:	7e 81       	ldd	r23, Y+6	; 0x06
 3ba:	8f 81       	ldd	r24, Y+7	; 0x07
 3bc:	33 df       	rcall	.-410    	; 0x224 <checkShowTimeButton>

		checkManualButton();
 3be:	79 de       	rcall	.-782    	; 0xb2 <checkManualButton>
		checkElectricityStatus();
 3c0:	a3 de       	rcall	.-698    	; 0x108 <checkElectricityStatus>

		if(isManualControl == 1){
 3c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3c6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <main+0x5c>
			changeAutoInidicator(1);
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	c7 df       	rcall	.-114    	; 0x362 <changeAutoInidicator>
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <main+0x62>
			} else {
			changeAutoInidicator(0);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	c3 df       	rcall	.-122    	; 0x362 <changeAutoInidicator>
		}

		if(isManualControl == 0)
 3dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3e0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 3e4:	89 2b       	or	r24, r25
 3e6:	41 f5       	brne	.+80     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		{
			if(isActiveTime(rtc) == 1)
 3e8:	29 81       	ldd	r18, Y+1	; 0x01
 3ea:	3a 81       	ldd	r19, Y+2	; 0x02
 3ec:	4b 81       	ldd	r20, Y+3	; 0x03
 3ee:	5c 81       	ldd	r21, Y+4	; 0x04
 3f0:	6d 81       	ldd	r22, Y+5	; 0x05
 3f2:	7e 81       	ldd	r23, Y+6	; 0x06
 3f4:	8f 81       	ldd	r24, Y+7	; 0x07
 3f6:	4b df       	rcall	.-362    	; 0x28e <isActiveTime>
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	b9 f4       	brne	.+46     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				changeTimeInidicator(1);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	aa df       	rcall	.-172    	; 0x356 <changeTimeInidicator>
				if(electricityStatus==1)
 402:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 406:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	39 f4       	brne	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				{
					changeOutputLedStatus(0);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	5b df       	rcall	.-330    	; 0x2ca <changeOutputLedStatus>
					changeElectricityInidicator(1);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	98 df       	rcall	.-208    	; 0x34a <changeElectricityInidicator>
 41a:	10 c0       	rjmp	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				}
				else
				{
					changeOutputLedStatus(1);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	54 df       	rcall	.-344    	; 0x2ca <changeOutputLedStatus>
					changeElectricityInidicator(0);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	91 df       	rcall	.-222    	; 0x34a <changeElectricityInidicator>
 428:	09 c0       	rjmp	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				}
			}
			else
			{
				changeTimeInidicator(0);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	93 df       	rcall	.-218    	; 0x356 <changeTimeInidicator>
				changeOutputLedStatus(0);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	4a df       	rcall	.-364    	; 0x2ca <changeOutputLedStatus>
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			}
		}
		else
		{
			checkOnButton();
 438:	4e df       	rcall	.-356    	; 0x2d6 <checkOnButton>
			checkOffButton();
 43a:	6a df       	rcall	.-300    	; 0x310 <checkOffButton>
		}

		if(electricityStatus==1)
 43c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <electricityStatus>
 440:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <electricityStatus+0x1>
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	21 f4       	brne	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			changeElectricityInidicator(1);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	7e df       	rcall	.-260    	; 0x34a <changeElectricityInidicator>
 44e:	ab cf       	rjmp	.-170    	; 0x3a6 <main+0x2c>
		}
		else
		{
			changeElectricityInidicator(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	7a df       	rcall	.-268    	; 0x34a <changeElectricityInidicator>
 456:	a7 cf       	rjmp	.-178    	; 0x3a6 <main+0x2c>

00000458 <RTC_Init>:
    I2C_Write(rtc->date);                    // Write date on RAM address 04H
    I2C_Write(rtc->month);                    // Write month on RAM address 05H
    I2C_Write(rtc->year);                    // Write year on RAM address 06h

    I2C_Stop();                              // Stop I2C communication after Setting the Date
}
 458:	08 de       	rcall	.-1008   	; 0x6a <I2C_Init>
 45a:	0d de       	rcall	.-998    	; 0x76 <I2C_Start>
 45c:	80 ed       	ldi	r24, 0xD0	; 208
 45e:	17 de       	rcall	.-978    	; 0x8e <I2C_Write>
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	15 de       	rcall	.-982    	; 0x8e <I2C_Write>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	13 de       	rcall	.-986    	; 0x8e <I2C_Write>
 468:	0c de       	rcall	.-1000   	; 0x82 <I2C_Stop>
 46a:	08 95       	ret

0000046c <RTC_GetDateTime>:
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
    I2C_Start();                            // Start I2C communication
 472:	01 de       	rcall	.-1022   	; 0x76 <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
 474:	80 ed       	ldi	r24, 0xD0	; 208
 476:	0b de       	rcall	.-1002   	; 0x8e <I2C_Write>
    I2C_Write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	09 de       	rcall	.-1006   	; 0x8e <I2C_Write>

    I2C_Stop();                                // Stop I2C communication after selecting Sec Register
 47c:	02 de       	rcall	.-1020   	; 0x82 <I2C_Stop>

    I2C_Start();                            // Start I2C communication
 47e:	fb dd       	rcall	.-1034   	; 0x76 <I2C_Start>
    I2C_Write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
 480:	81 ed       	ldi	r24, 0xD1	; 209
 482:	05 de       	rcall	.-1014   	; 0x8e <I2C_Write>

    rtc->sec = I2C_Read(1);                // read second and return Positive ACK
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0a de       	rcall	.-1004   	; 0x9c <I2C_Read>
 488:	88 83       	st	Y, r24
    rtc->min = I2C_Read(1);                 // read minute and return Positive ACK
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	07 de       	rcall	.-1010   	; 0x9c <I2C_Read>
 48e:	89 83       	std	Y+1, r24	; 0x01
    rtc->hour= I2C_Read(1);               // read hour and return Negative/No ACK
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	04 de       	rcall	.-1016   	; 0x9c <I2C_Read>
 494:	8a 83       	std	Y+2, r24	; 0x02
    rtc->weekDay = I2C_Read(1);           // read weekDay and return Positive ACK
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	01 de       	rcall	.-1022   	; 0x9c <I2C_Read>
 49a:	8b 83       	std	Y+3, r24	; 0x03
    rtc->date= I2C_Read(1);              // read Date and return Positive ACK
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	fe dd       	rcall	.-1028   	; 0x9c <I2C_Read>
 4a0:	8c 83       	std	Y+4, r24	; 0x04
    rtc->month=I2C_Read(1);            // read Month and return Positive ACK
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	fb dd       	rcall	.-1034   	; 0x9c <I2C_Read>
 4a6:	8d 83       	std	Y+5, r24	; 0x05
    rtc->year =I2C_Read(0);             // read Year and return Negative/No ACK
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	f8 dd       	rcall	.-1040   	; 0x9c <I2C_Read>
 4ac:	8e 83       	std	Y+6, r24	; 0x06

    I2C_Stop();                              // Stop I2C communication after reading the Date
 4ae:	e9 dd       	rcall	.-1070   	; 0x82 <I2C_Stop>
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
